#!/usr/bin/env python
# -*- python -*-

import glob

def FileExists(filename):
    return len(glob.glob(filename)) > 0

rlist=['gfCvStruct',
       'gfEltm',
       'gfFem',
       'gfGeoTrans',
       'gfInteg',
       'gfMdBrick',
       'gfMdState',
       'gfMesh',
       'gfMeshFem',
       'gfMeshIm',
       'gfPrecond',
       'gfSlice',
       'gfSpmat',
       'gfLevelSet',
       'gfMeshLevelSet'];

for i in rlist:
    mname = ''
    for j in i:
        if (j.lower() != j):
            mname = mname + '_' + j.lower()
        else:
            mname = mname + j
    print mname
    if (i == 'gfCvStruct'):
        mname = 'gf_cvstruct'
    elif (i == 'gfMdBrick'):
        mname = 'gf_mdbrick';
    elif (i == 'gfMdState'):
        mname = 'gf_mdstate'
    elif (i == 'gfLevelSet'):
        mname = 'gf_levelset'
    elif (i == 'gfMeshLevelSet'):
        mname = 'gf_mesh_levelset'
    rdir = 'matlab/@' + i;

    has_get = 0
    has_set = 0

    mnameget = mname + '_get'
    if (FileExists(mnameget + '.cc')): #rdir + '/get.m')):
        has_get = 1
        #print '%s found\n' % (rdir+'/get.m',)
        f=file(rdir + '/get.m', 'w')
        f.write("function varargout=get(obj,varargin)\n");
        f.write("%% %s/get.m\n%% see %s for more help.\n" % (i, mnameget));
        f.write("if (nargout),\n [varargout{1:nargout}]=%s(obj, varargin{:});\n"
                % (mnameget,));
        f.write("else\n");
        f.write(" %s(obj,varargin{:});\n" % (mnameget,));
        f.write(" if (exist('ans','var') == 1), varargout{1}=ans;\nend;\n");
        f.write("end\n");
        f.write("% autogenerated by gen_mfiles");
        f.close();

    mnameset = mname + '_set'
    if (FileExists(mnameset + '.cc')): #rdir + '/set.m')):
        has_set = 1
        #print '%s found\n' % (rdir+'/set.m',)
        f=file(rdir + '/set.m', 'w')
        f.write("function varargout=set(obj,varargin)\n");
        f.write("%% %s/set.m\n%% see %s for more help.\n" % (i, mnameset));
        f.write("if (nargout),\n [varargout{1:nargout}]=%s(obj, varargin{:});\n"
                % (mnameset,));
        f.write("else\n");
        f.write(" %s(obj,varargin{:});\n" % (mnameset,));
        f.write(" if (exist('ans','var') == 1), varargout{1}=ans;\nend;\n");
        f.write("end\n");
        f.write("% autogenerated by gen_mfiles");
        f.close();


    mlst = glob.glob(rdir + '/*.m');
    mlst = [s[(len(rdir)+1):] for s in mlst];
    mlst.sort()
    print 'mlst = ', mlst

    f=file(rdir + '/Makefile.am', 'w')
    f.write('# autogenerated by gen_mfiles\n');
    f.write('EXTRA_DIST=' + ' '.join(mlst) + '\n')
    f.write('toolboxdir=@TOOLBOXDIR@/@' + i + '\n')
    f.write('toolbox_SCRIPTS=' + ' '.join(mlst) + '\n')
    f.close()

    print has_get, has_set
    if (has_get or has_set):
        f=file(rdir + '/subsref.m', 'r')
        ll=[x for x in f.readlines()];
        llset = [x for x in ll if x.find("case 'set'") != -1];
        llget = [x for x in ll if x.find("case 'get'") != -1];
        if (has_set and len(llset) == 0):
            print "MISSING case 'set' in " + rdir + "/subsref.m\n"
        if (has_get and len(llget) == 0):
            print "MISSING case 'get' in " + rdir + "/subsref.m\n"
    
    
  
