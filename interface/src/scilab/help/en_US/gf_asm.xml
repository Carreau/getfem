<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="gf_asm" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <refnamediv>
    <refname>gf_asm</refname>

    <refpurpose>General assembly function.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>
vec F = gf_asm('volumic source', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec F)
vec F = gf_asm('boundary source',int boundary_num, mesh_im mim, mesh_fem mf_u, mesh_fem mf_d,vec G)
spmat M = gf_asm('mass matrix', mesh_im mim, mesh_fem mf1[, mesh_fem mf2])
spmat M = gf_asm('laplacian', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec A)
spmat K = gf_asm('linear elasticity', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec lambda_d, vec mu_d)
[spmat K,B] = gf_asm('stokes', mesh_im mim, mesh_fem mf_u, mesh_fem mf_p, mesh_fem mf_d, vec visc)
[spmat H,vec R] = gf_asm('dirichlet', int boundary_num, mesh_im mim, mesh_fem mf_u, 
mesh_fem mf_d, mat Hd, vec Rd)
M = gf_asm('boundary qu term', int boundary_num, mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, mat Q)
[spmat Q, vec G,spmat H,vec R,vec F]=gf_asm('pdetool boundary conditions',
mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, mat b, mat e[, string f_expr])
[...] = gf_asm('volumic'[, CVLST], string expr, mesh_im mim.., [mesh_fem mf1[, mf2,..]][,mat data...])
[...] = gf_asm('boundary', int bnum, string expr, mesh_im mim.., [mesh_fem mf1[, mf2,..]][,mat data...])
M = gf_asm('interpolation matrix', mesh_fem mf1, mesh_fem mf2)
M = gf_asm('extrapolation matrix', mesh_fem mf1, mesh_fem mf2)
    </synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>Many of the functions below use more than one mesh_fem: the main
    mesh_fem (mf_u) used for the main unknow, and data mesh_fem (mf_d) used
    for the data. It is always assumed that the Qdim of mf_d is equal to 1: if
    mf_d is used to describe vector or tensor data, you just have to "stack"
    (in fortran ordering) as many scalar fields as necessary.</para>

    <itemizedlist>
      <listitem>
        <para>V = gf_asm('volumic_source',MeshIm mim, MeshFem mf_u, MeshFem
        mf_d, vec fd) Assembly of a volumic source term. Output a vector `V`,
        assembled on the MeshFem `mf_u`, using the data vector `fd` defined on
        the data MeshFem `mf_d`. `fd` may be real or complex-valued.</para>

        <para>Return a vec object.</para>
      </listitem>

      <listitem>
        <para>B = gf_asm('boundary_source',int bnum, MeshIm mim, MeshFem mf_u,
        MeshFem mf_d, vec G) Assembly of a boundary source term. `G` should be
        a [Qdim x N] matrix, where N is the number of dof of `mf_d`, and Qdim
        is the dimension of the unkown u (that is set when creating the
        MeshFem).</para>

        <para>Return a vec object.</para>
      </listitem>

      <listitem>
        <para>M = gf_asm('mass_matrix',MeshIm mim, MeshFem mf1[, MeshFem mf2])
        Assembly of a mass matrix.</para>

        <para>Return a Spmat object.</para>
      </listitem>

      <listitem>
        <para>L = gf_asm('laplacian',MeshIm mim, MeshFem mf_u, MeshFem mf_d,
        vec a) Assembly of the matrix for the Laplacian problem.
        <inlineequation>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../mml/gf_asm_eq1.mml" />
              </imageobject>
            </inlinemediaobject>
          </inlineequation> with <literal>a</literal> scalar. Return a Spmat
        object.</para>
      </listitem>

      <listitem>
        <para>Le = gf_asm('linear_elasticity',MeshIm mim, MeshFem mf_u,
        MeshFem mf_d, vec lambda_d, vec mu_d) Assembles of the matrix for the
        linear (isotropic) elasticity problem. <inlineequation>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../mml/gf_asm_eq2.mml" />
              </imageobject>
            </inlinemediaobject>
          </inlineequation> with <literal>C</literal> defined via
        <literal>lambda_d</literal> and <literal>mu_d</literal>.</para>

        <para>Return a Spmat object.</para>
      </listitem>

      <listitem>
        <para>TRHS = gf_asm('nonlinear_elasticity',MeshIm mim, MeshFem mf_u,
        vec U, string law, MeshFem mf_d, mat params, list('tangent
        matrix'|'rhs'|'incompressible tangent matrix', MeshFem mf_p, vec
        P|'incompressible rhs', MeshFem mf_p, vec P)) Assembles terms (tangent
        matrix and right hand side) for nonlinear elasticity. The solution
        <literal>U</literal> is required at the current time-step. The
        <emphasis>law</emphasis> may be choosen among:</para>

        <itemizedlist>
          <listitem>
            <para>'SaintVenant Kirchhoff': Linearized law, should be avoided).
            This law has the two usual Lame coefficients as parameters, called
            lambda and mu.</para>
          </listitem>

          <listitem>
            <para>'Mooney Rivlin': Only for incompressibility. This law has
            two parameters, called C1 and C2.</para>
          </listitem>

          <listitem>
            <para>'Ciarlet Geymonat': This law has 3 parameters, called
            lambda, mu and gamma, with gamma chosen such that gamma is in
            ]-lambda/2-mu, -mu[.</para>
          </listitem>
        </itemizedlist>

        <para>The parameters of the material law are described on the MeshFem
        <literal>mf_d</literal>. The matrix <literal>params</literal> should
        have <literal>nbdof(mf_d)</literal> columns, each row correspounds to
        a parameter. The last argument selects what is to be built: either the
        tangent matrix, or the right hand side. If the incompressibility is
        considered, it should be followed by a MeshFem
        <literal>mf_p</literal>, for the pression.</para>

        <para>Return a Spmat object (tangent matrix), vec object (right hand
        side), tuple of Spmat objects (incompressible tangent matrix), or
        tuple of vec objects (incompressible right hand side).</para>
      </listitem>

      <listitem>
        <para>list(K, B) = gf_asm('stokes',MeshIm mim, MeshFem mf_u, MeshFem
        mf_p, MeshFem mf_d, vec nu) Assembly of matrices for the Stokes
        problem.</para>

        <para><inlineequation>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../mml/gf_asm_eq3.mml" />
              </imageobject>
            </inlinemediaobject>
          </inlineequation></para>

        <para><inlineequation>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../mml/gf_asm_eq4.mml" />
              </imageobject>
            </inlinemediaobject>
          </inlineequation> with <emphasis>nu</emphasis>, the fluid's dynamic
        viscosity. </para>

        <para>On output, <literal>K</literal> is the usual linear elasticity
        stiffness matrix with <emphasis>lambda = 0</emphasis> and
        <literal>2.mu = nu</literal>. <literal>B</literal> is a matrix
        corresponding to <emphasis>\int p\nabla\cdot\phi</emphasis>.
        <literal>K</literal> and <literal>B</literal> are Spmat
        object's.</para>
      </listitem>

      <listitem>
        <para>A = gf_asm('helmholtz',MeshIm mim, MeshFem mf_u, MeshFem mf_d,
        vec k) Assembly of the matrix for the Helmholtz problem. </para>

        <para><inlineequation>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../mml/gf_asm_eq5.mml" />
              </imageobject>
            </inlinemediaobject>
          </inlineequation> with <literal>k</literal> complex scalar.</para>

        <para>Return a Spmat object.</para>
      </listitem>

      <listitem>
        <para>A = gf_asm('bilaplacian',MeshIm mim, MeshFem mf_u, MeshFem mf_d,
        vec a) Assembly of the matrix for the Bilaplacian problem.</para>

        <para><inlineequation>
            <inlinemediaobject>
              <imageobject>
                <imagedata fileref="../mml/gf_asm_eq6.mml" />
              </imageobject>
            </inlinemediaobject>
          </inlineequation> with <literal>a</literal> scalar.</para>

        <para>Return a Spmat object.</para>
      </listitem>

      <listitem>
        <para>list(HH, RR) = gf_asm('dirichlet',int bnum, MeshIm mim, MeshFem
        mf_u, MeshFem mf_d, mat H, vec R [, threshold]) Assembly of Dirichlet
        conditions of type <emphasis>h.u = r</emphasis>. Handle <emphasis>h.u
        = r</emphasis> where <literal>h</literal> is a square matrix (of any
        rank) whose size is equal to the dimension of the unkown
        <literal>u</literal>. This matrix is stored in <literal>H</literal>,
        one column per dof in <emphasis>mf_d</emphasis>, each column
        containing the values of the matrix <literal>h</literal> stored in
        fortran order: <emphasis>H(:,j) = [h11(x_j) h21(x_j) h12(x_j)
        h22(x_j)]</emphasis> if <literal>u</literal> is a 2D vector field. Of
        course, if the unknown is a scalar field, you just have to set
        <literal>H = ones(1, N)</literal>, where <literal>N</literal> is the
        number of dof of <literal>mf_d</literal>. This is basically the same
        than calling <emphasis>gf_asm('boundary_qu_term')</emphasis> for
        <literal>H</literal> and calling
        <emphasis>gf_asm('neumann')</emphasis> for <literal>R</literal>,
        except that this function tries to produce a 'better' (more diagonal)
        constraints matrix (when possible). See also
        <emphasis>gf_spmat_get(M,('Dirichlet_nullspace')</emphasis>.</para>
      </listitem>

      <listitem>
        <para>Q = gf_asm('boundary_qu_term',int boundary_num, MeshIm mim,
        MeshFem mf_u, MeshFem mf_d, mat q) Assembly of a boundary qu term.
        <literal>q</literal> should be be a <emphasis>[Qdim x Qdim x
        N]</emphasis> array, where <literal>N</literal> is the number of dof
        of <literal>mf_d</literal>, and <literal>Qdim</literal> is the
        dimension of the unkown <literal>u</literal> (that is set when
        creating the MeshFem).</para>

        <para>Return a Spmat object.</para>
      </listitem>

      <listitem>
        <para>list(Q, G, H, R, F) = gf_asm('pdetool_boundary_conditions',mf_u,
        mf_d, b, e[, f_expr]) Assembly of pdetool boundary conditions. `B` is
        the boundary matrix exported by pdetool, and `E` is the edges array.
        `f_expr` is an optionnal expression (or vector) for the volumic term.
        On return `Q, G, H, R, F` contain the assembled boundary conditions
        (`Q` and `H` are matrices), similar to the ones returned by the
        function ASSEMB from PDETOOL.</para>
      </listitem>

      <listitem>
        <para>list(...) = gf_asm('volumic' [,CVLST], expr [, mesh_ims,
        mesh_fems, data...]) Generic assembly procedure for volumic assembly.
        The expression <emphasis>expr</emphasis> is evaluated over the
        MeshFem's listed in the arguments (with optional data) and assigned to
        the output arguments. For details about the syntax of assembly
        expressions, please refer to the getfem user manual (or look at the
        file getfem_assembling.h in the getfem++ sources). For example, the L2
        norm of a field can be computed with <emphasis>gf_compute(MF, U,('L2
        norm')</emphasis> or with:</para>

        <para><emphasis>gf_asm('volumic','u=data(#1);
        V()+=u(i).u(j).comp(Base(#1).Base(#1))(i,j)',mim,mf,U)
        </emphasis></para>

        <para>The Laplacian stiffness matrix can be evaluated with
        <emphasis>gf_asm('laplacian',mim, mf, A)</emphasis> or equivalently
        with:</para>

        <para><emphasis>gf_asm('volumic','a=data(#2);M(#1,#1)+=sym(comp(Grad(#1).Grad(#1).Base(#2))(
        :,i,:,i,j).a(j))', mim,mf, A);</emphasis></para>
      </listitem>

      <listitem>
        <para>list(...) = gf_asm('boundary',int bnum, string expr [, MeshIm
        mim, MeshFem mf, data...]) Generic boundary assembly. See the help for
        <emphasis>gf_asm('volumic')</emphasis>.</para>
      </listitem>

      <listitem>
        <para>Mi = gf_asm('interpolation_matrix',MeshFem mf, MeshFem mfi)
        Build the interpolation matrix from a MeshFem onto another
        MeshFem.</para>

        <para>Return a matrix <literal>Mi</literal>, such that <emphasis>V =
        Mi.U</emphasis> is equal to <emphasis>gf_compute(MF,
        U,('interpolate_on',mfi)</emphasis>. Useful for repeated
        interpolations. Note that this is just interpolation, no elementary
        integrations are involved here, and <literal>mfi</literal> has to be
        lagrangian. In the more general case, you would have to do a L2
        projection via the mass matrix. <literal>Mi</literal> is a Spmat
        object.</para>
      </listitem>

      <listitem>
        <para>Me = gf_asm('extrapolation_matrix',MeshFem mf, MeshFem mfe)
        Build the extrapolation matrix from a MeshFem onto another
        MeshFem.</para>

        <para>Return a matrix <literal>Me</literal>, such that <emphasis>V =
        Me.U</emphasis> is equal to <emphasis>gf_compute(MF,
        U,('extrapolate_on',mfe)</emphasis>. Useful for repeated
        extrapolations. <literal>Me</literal> is a Spmat object.</para>
      </listitem>
    </itemizedlist>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member><link linkend="gf_solve">gf_solve</link></member>

      <member><link linkend="gf_compute">gf_compute('interpolate
      on')</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <para>Y. Collette</para>
  </refsection>
</refentry>
