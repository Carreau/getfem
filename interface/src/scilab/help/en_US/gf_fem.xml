<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="gf_fem" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <refnamediv>
    <refname>gf_fem</refname>

    <refpurpose>Returns a handle F to one of the various Finite Elements
    Method defined in Getfem.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>F=gf_fem(string FEM_NAME)  </synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Description</title>

    <para>The fem_name should contain a description of the finite element method. Please refer to the getfem++ manual 
      (especially <link linkend="http://www-gmm.insa-toulouse.fr/getfem/doc">the description of finite element and integration methods</link>) 
      for a complete reference. </para>

    <para>Here is a list of some of them:</para>

    <itemizedlist>
      <listitem>
        <para>FEM_PK(n,k) classical Lagrange element Pk on a simplex of
        dimension <literal>n</literal>.</para>
      </listitem>

      <listitem>
        <para>FEM_PK_DISCONTINUOUS(N,K[,alpha]) discontinuous Lagrange element
        Pk on a simplex of dimension <literal>n</literal>.</para>
      </listitem>

      <listitem>
        <para>FEM_QK(n,k) classical Lagrange element Qk on quadrangles,
        hexahedrons etc.</para>
      </listitem>

      <listitem>
        <para>FEM_QK_DISCONTINUOUS(n,k[,alpha]) discontinuous Lagrange element
        Qk on quadrangles, hexahedrons etc.</para>
      </listitem>

      <listitem>
        <para>FEM_Q2_INCOMPLETE incomplete 2D Q2 element with 8 dof
        (serendipity Quad 8 element).</para>
      </listitem>

      <listitem>
        <para>FEM_PK_PRISM(n,k) classical Lagrange element Pk on a
        prism.</para>
      </listitem>

      <listitem>
        <para>FEM_PK_PRISM_DISCONTINUOUS(n,k[,alpha]) classical discontinuous
        Lagrange element Pk on a prism.</para>
      </listitem>

      <listitem>
        <para>FEM_PK_WITH_CUBIC_BUBBLE(n,k) classical Lagrange element Pk on a
        simplex with an additional volumic bubble function.</para>
      </listitem>

      <listitem>
        <para>FEM_P1_NONCONFORMING non-conforming P1 method on a
        triangle.</para>
      </listitem>

      <listitem>
        <para>FEM_P1_BUBBLE_FACE(n) P1 method on a simplex with an additional
        bubble function on face 0.</para>
      </listitem>

      <listitem>
        <para>FEM_P1_BUBBLE_FACE_LAG P1 method on a simplex with an additional
        lagrange dof on face 0.</para>
      </listitem>

      <listitem>
        <para>FEM_PK_HIERARCHICAL(n,k) PK element with a hierarchical
        basis.</para>
      </listitem>

      <listitem>
        <para>FEM_QK_HIERARCHICAL(n,k) QK element with a hierarchical
        basis</para>
      </listitem>

      <listitem>
        <para>FEM_PK_PRISM_HIERARCHICAL(n,k) PK element on a prism with a
        hierarchical basis.</para>
      </listitem>

      <listitem>
        <para>FEM_STRUCTURED_COMPOSITE(FEM,k) Composite fem on a grid with
        <literal>k</literal> divisions.</para>
      </listitem>

      <listitem>
        <para>FEM_PK_HIERARCHICAL_COMPOSITE(n,k,s) Pk composite element on a
        grid with <literal>s</literal> subdivisions and with a hierarchical
        basis.</para>
      </listitem>

      <listitem>
        <para>FEM_PK_FULL_HIERARCHICAL_COMPOSITE(n,k,s) Pk composite element
        with <literal>s</literal> subdivisions and a hierarchical basis on
        both degree and subdivision.</para>
      </listitem>

      <listitem>
        <para>FEM_PRODUCT(FEM1,FEM2) tensorial product of two polynomial
        elements.</para>
      </listitem>

      <listitem>
        <para>FEM_HERMITE(n) Hermite element P3 on a simplex of dimension `n =
        1, 2, 3`.</para>
      </listitem>

      <listitem>
        <para>FEM_ARGYRIS Argyris element P5 on the triangle.</para>
      </listitem>

      <listitem>
        <para>FEM_HCT_TRIANGLE Hsieh-Clough-Tocher element on the triangle
        (composite P3 element which is C^1), should be used with
        IM_HCT_COMPOSITE() integration method.</para>
      </listitem>

      <listitem>
        <para>FEM_QUADC1_COMPOSITE Quadrilateral element, composite P3 element
        and C^1 (16 dof).</para>
      </listitem>

      <listitem>
        <para>FEM_REDUCED_QUADC1_COMPOSITE Quadrilateral element, composite P3
        element and C^1 (12 dof).</para>
      </listitem>

      <listitem>
        <para>FEM_RT0(n) Raviart-Thomas element of order 0 on a simplex of
        dimension <literal>n</literal>.</para>
      </listitem>

      <listitem>
        <para>FEM_NEDELEC(n) Nedelec edge element of order 0 on a simplex of
        dimension <literal>n</literal>.</para>
      </listitem>
    </itemizedlist>

    <para>Of course, you have to ensure that the selected fem is compatible
    with the geometric transformation: a Pk fem has no meaning on a
    quadrangle.</para>

    <itemizedlist>
      <listitem>
        <para>Fem = gf_fem('interpolated_fem', MeshFem mf, MeshIm mim, [ivec
        blocked_dof]) Build a special Fem which is interpolated from another
        MeshFem. Using this special finite element, it is possible to
        interpolate a given MeshFem <literal>mf</literal> on another mesh,
        given the integration method <literal>mim</literal> that will be used
        on this mesh. Note that this finite element may be quite slow, and
        eats much memory.</para>
      </listitem>
    </itemizedlist>
  </refsection>

  <refsection>
    <title>Examples</title>

    <para>To get a fem of degree 2 on a quadrangle: </para>

    <programlisting role="example"><![CDATA[ 
fem = gf_fem('FEM_QK(2,2)');
or
fem = gf_fem('FEM_PRODUCT(FEM_PK(1,1),FEM_PK(1,1))');  
 ]]></programlisting>

    <para>The scilab function sprintf might be useful if you need to build the PK fem with k and n as arguments: </para>
    
    <programlisting role="example"><![CDATA[ 
fem = gf_fem(sprintf('FEM_PK(%d,%d)', k, n));  
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member><link linkend="gf_fem_get">gf_fem_get</link></member>
      <member><link linkend="gf_integ">gf_integ</link></member>
      <member><link linkend="gf_mesh_fem_set">gf_mesh_fem_set(mesh_fem, 'fem', fem)</link></member>
      <member><link linkend="gf_mesh_fem_get">gf_mesh_fem_get('fem')</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <para>Y. Collette</para>
  </refsection>
</refentry>
