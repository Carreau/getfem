dnl Process this file with autoconf to produce a configure script.
dnl ------------------------------------------------------------------------
dnl initialisation
dnl ------------------------------------------------------------------------

dnl ./configure: sh internal 2K buffer overflow on HP-UX 9.xx
dnl thus, updating cache ./config.cache avoided.
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

AC_INIT(config/install-sh)
AC_CONFIG_HEADER(config.h)
AX_PREFIX_CONFIG_H(src/getfem_arch_config.h,GETFEM) 
AC_PREREQ(2.56)
AC_ARG_PROGRAM
AC_CONFIG_AUX_DIR([config])

PACKAGE="getfem++"
MAJOR_VERSION="1"
MINOR_VERSION="5"
VERSION=$MAJOR_VERSION.$MINOR_VERSION
echo "configuring $PACKAGE $VERSION..."


dnl ------------------------------------------------------------------------
dnl   init automake
dnl ------------------------------------------------------------------------

AM_INIT_AUTOMAKE($PACKAGE,$VERSION)

ACLOCAL_M4=config/aclocal.m4
CLOCAL="aclocal -I config --output=${ACLOCAL_M4}"
AUTOCONF="autoconf -I config"
dnl CONFIGURE_DEPENDENCIES="config/aclocal.m4 config/ltconfig config/ltmain.sh"
dnl AC_SUBST(CONFIGURE_DEPENDENCIES)

dnl -----------------------------------------------
dnl test du c++
dnl -----------------------------------------------

USER_CXXFLAGS="$CXXFLAGS"
AC_PROG_CXX(cxx KCC CC cc++ xlC aCC g++ c++ icc)
AC_PROG_CXXCPP
CXXFLAGS="${USER_CXXFLAGS}"
SUPLDFLAGS=""

AC_LANG_CPLUSPLUS

if test "x$prefix" = "xNONE"; then
  GFPREFIX=/usr/local;
else
  GFPREFIX="$prefix";
fi;

dnl AC_CXX_FULL_SPECIALIZATION_SYNTAX (c)Luc Maisonobe v 1.1.1.1 (2001/07/26)     0.5.41 
dnl with some modification to test partial specialization
AC_CACHE_CHECK(whether the compiler recognizes the partial specialization syntax,
ac_cv_cxx_partial_specialization_syntax,
[AC_LANG_SAVE
 AC_LANG_CPLUSPLUS
 AC_TRY_COMPILE([
template<class T> class A        { public : int f () const { return 1; } };
template<class T> class A<T*>    { public:  int f () const { return 0; } };],[
A<float*> a; return a.f();],
 ac_cv_cxx_partial_specialization_syntax=yes, ac_cv_cxx_partial_specialization_syntax=no)
 AC_LANG_RESTORE
])
if test "$ac_cv_cxx_partial_specialization_syntax" != yes; then
  echo "Your compiler ($CXX) does not support partial template specialization, trash it"
  exit 1;
fi

AC_CANONICAL_HOST

echo "you are compiling getfem++ on a $host"

case $CXX in
 cxx)
	echo "Using Compaq cxx compiler"
	echo "WARNING : Control that you have at least Compaq C++ V6.3"
 	here=`pwd`
 	cd $srcdir
dnl     il faut utiliser -tweak au lieu des repositories ...
	CXXFLAGS="$CXXFLAGS -tweak -std strict_ansi -fast -Wl,-S -nopure_cname"
dnl 	CXXFLAGS="$CXXFLAGS -ptr `pwd`/cxx_repository -std strict_ansi -O3"
 	cd $here
	;;
 CC)
	case $host in
	*irix*)
		echo "Using MIPSPRO CC on IRIX  (LD is set to CC)"
		LD=CC   dnl sinon getfem_matlab a des problèmes (unresolved symbol __record_needed_destruction)
dnl 		CXXFLAGS="$CXXFLAGS -LANG:std -O3 -OPT:Olimit=0:roundoff=3:div_split=ON:alias=typed -TARG:platform=ip25"
 		CXXFLAGS="$CXXFLAGS -LANG:std  -O3 "
dnl             CXXFLAGS="$CXXFLAGS -LANG:std  -O3 -ansiW "
		SUPLDFLAGS="-lCio"
		;;
	*sun*)
		echo "Using SUN C++ WorkShop Compiler"
		CXXFLAGS="$CXXFLAGS +w2 -O3"
		;;
	esac
	;;
 aCC)
	echo "Using HP ANSI C++ Compiler aCC"
	CXXFLAGS="$CXXFLAGS -AA -fast"	
	;;
	
 g++* | c++)
	GCCVER=`$CXX --version | head -1 | cut -d ' ' -f3`
	echo "Using the GNU g++ compiler $GCCVER"
	case $GCCVER in
          2.95*)
	  	WSHADOW=""
		;;
	  *)
		WSHADOW="-Wshadow"
		;;
	esac
 	CXXFLAGS="$CXXFLAGS -pipe -ftemplate-depth-40 -pedantic -O3 -Wall -W -Wtraditional $WSHADOW -Wpointer-arith -Wcast-qual -Wwrite-strings -Wconversion -Wmissing-prototypes -Wredundant-decls"
	;;
 icc | icpc)
	echo "Using INTEL icc"
dnl -tpp6 is for pentiumII and more
dnl -Xc is for ansi conformance
	CXXFLAGS="$CXXFLAGS -O3 -tpp6"
	;;
 *)
	echo "Using a unknown compiler"
 	CXXFLAGS="$CXXFLAGS -O3"
	;;
esac

AC_SUBST(SUPLDFLAGS)

dnl ------------------------------------------------------------------------
dnl   init libtools for shared libraries
dnl ------------------------------------------------------------------------

dnl AC_DISABLE_FAST_INSTALL

AM_ENABLE_STATIC

dnl AM_PROG_LIBTOOL
AM_PROG_LIBTOOL
AC_SUBST([LIBTOOL_DEPS])


dnl -----------------------------QD TESTS--------------------------------
AC_ARG_WITH(qd-lib-dir, [  --with-qd-lib-dir       directory in which the libqd.a can be found],
	QDLIB="$withval/libqd.a",QDLIB="$GFPREFIX/lib/libqd.a")
AC_ARG_WITH(qd-include-dir, [  --with-include-dir      directory in which the qd.h header can be found],
	QDINC="-I$withval",QDINC="-I$GFPREFIX/include")
AC_ARG_ENABLE(dd,
 [  --enable-dd             enable the use of the qd library (some computation will be done with double-double precision, usefull for high order FEMs)],
 [ if   test "x$enableval" = "xyes" ; then useQDlib="yes"; QD_PREC="double"; fi], [useQDlib="no"])
AC_ARG_ENABLE(qd,
 [  --enable-qd             enable the use of the qd library (some computation will be done with quad-double precision, usefull for high order FEMs)],
 [ if   test "x$enableval" = "xyes" ; then useQDlib="yes"; QD_PREC="quad"; fi], [if test "x$useQDlib" = "xyes"; then useQDlib="yes"; else useQDlib="no"; fi])
if test "x$useQDlib" = "xyes" ; then  
  LIBS="$LIBS $QDLIB -lm"
  CPPFLAGS="$CPPFLAGS $QDINC"
  AC_TRY_RUN([
#define NO_INLINE
#include <qd.h>
#include <dd.h>
#include <x86.h>
#include <iostream>
int main() {
  unsigned short old_cw;
  int ok;
  x86_fix_start(&old_cw);
  qd_real q = 1.0;
  qd_real qq = qd_real("0.01");
  qd_real qqq = "1.010101010101010101010101010101010101010101010101010101010101010E0";
  dd_real d = 1.0;
  dd_real dd = dd_real("0.1");
  dd_real ddd = "1.1111111111111111111111111111111E0";
  for (int i=0; i < 100; ++i) { d += dd; dd *= dd_real("0.1"); }
  for (int i=0; i < 100; ++i) { q += qq; qq *= qd_real("0.01"); }
  std::cerr << "d = " << d << std::endl << "q = " << q << std::endl;
  std::cerr << abs(q - qqq) << endl;
  std::cerr << abs(d - ddd) << endl;
  if (abs(q - qqq) < 1e-63 && abs(d -ddd) < 1e-31) ok = 1;
  else ok = 0;
  x86_fix_end(&old_cw); return 1-ok;
}
  ], [echo "checking if qd library is working...yes"], [ echo "QD library is not working (check config.log)"; exit 1])
  AC_DEFINE_UNQUOTED([HAVE_QDLIB],1,[defined if the qd library was found and is working])
  HAVE_QDLIB=1;
  if test "x$QD_PREC" = "xquad"; then
    AC_DEFINE_UNQUOTED([QDLIB_USE_QUAD],1,[defined if quad-doubles are to be used instead of double-double])
  fi;
fi;
dnl -----------------------------END QD TESTS--------------------------------

AC_CHECK_HEADERS(sys/times.h)

BUILDER=`whoami`
AC_SUBST(BUILDER)
BUILDDATE=`date +%D,%H:%M:%S`
AC_SUBST(BUILDDATE)
CONFIGURE_ARGS=$ac_configure_args
AC_SUBST(CONFIGURE_ARGS)
LIBTOOL_VERSION_INFO="-version-info ${MAJOR_VERSION}:${MINOR_VERSION}:0"
AC_SUBST(LIBTOOL_VERSION_INFO)

dnl AC_CHECK_PROGS(RANLIB, ranlib)

dnl -----------------------------------------------
dnl sorties
dnl -----------------------------------------------
AC_CONFIG_FILES(\
	Makefile \
	config/Makefile \
	cubature/Makefile \
	src/Makefile \
	tests/Makefile \
	contrib/Makefile \
	bin/Makefile \
getfem-config getfem-config-notinstalled)
AC_OUTPUT
chmod +x getfem-config-notinstalled
chmod +x getfem-config
if test "x$useQDlib" = "xyes" ; then  
  echo "Using the QD library:"
  echo "   high precision (${QD_PREC}-double precision) polynomials and integration methods are enabled";
fi;
