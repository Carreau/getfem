dnl Process this file with autoconf to produce a configure script.
dnl ------------------------------------------------------------------------
dnl initialisation
dnl ------------------------------------------------------------------------

dnl ./configure: sh internal 2K buffer overflow on HP-UX 9.xx
dnl thus, updating cache ./config.cache avoided.
define([AC_CACHE_LOAD], )dnl
define([AC_CACHE_SAVE], )dnl

AC_INIT
AC_CONFIG_SRCDIR([install-sh])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADER(config.h)
AX_PREFIX_CONFIG_H(src/getfem/getfem_arch_config.h,GETFEM) 
AC_PREREQ(2.61)
AC_ARG_PROGRAM

PACKAGE="getfem++"
MAJOR_VERSION="4"
MINOR_VERSION="0"
PATCH_VERSION="0"
dnl VERSION=$MAJOR_VERSION.$MINOR_VERSION-`date +%Y%m%d`
VERSION=$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION
dnl VERSION=$MAJOR_VERSION.$MINOR_VERSION
AC_DEFINE_UNQUOTED([MAJOR_VERSION],$MAJOR_VERSION,[getfem major version number])
AC_DEFINE_UNQUOTED([MINOR_VERSION],$MINOR_VERSION,[getfem minor version number])
AC_DEFINE_UNQUOTED([PATCH_VERSION],$PATCH_VERSION,[getfem patch number (sub minor version)])
echo "configuring $PACKAGE $VERSION (patch level $PATCH_VERSION)..."


dnl ------------------------------------------------------------------------
dnl   init automake
dnl ------------------------------------------------------------------------

AM_INIT_AUTOMAKE($PACKAGE,$VERSION)

dnl -----------------------------------------------
dnl test du c++
dnl -----------------------------------------------

USER_CXXFLAGS="$CXXFLAGS"
USER_CFLAGS="$CFLAGS"
AC_PROG_CXX(g++ cxx KCC CC cc++ xlC aCC c++ icpc)
AC_PROG_CC(gcc icc cc)
AC_PROG_FC

AC_PROG_CXXCPP
CXXFLAGS="${USER_CXXFLAGS}"
CFLAGS="${USER_CFLAGS}"
SUPLDFLAGS=""
AC_FC_LIBRARY_LDFLAGS

AC_LANG([C++])

if test "x$prefix" = "xNONE"; then
  GFPREFIX=/usr/local;
else
  GFPREFIX="$prefix";
fi;

dnl AC_CXX_FULL_SPECIALIZATION_SYNTAX (c)Luc Maisonobe v 1.1.1.1 (2001/07/26)     0.5.41 
dnl with some modification to test partial specialization
AC_CACHE_CHECK(whether the compiler recognizes the partial specialization syntax,
ac_cv_cxx_partial_specialization_syntax,
[AC_DIAGNOSE([obsolete],[Instead of using `AC_LANG', `AC_LANG_SAVE', and `AC_LANG_RESTORE',
you should use `AC_LANG_PUSH' and `AC_LANG_POP'.])dnl
AC_LANG_SAVE
 AC_LANG([C++])
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
template<class T> class A        { public : int f () const { return 1; } };
template<class T> class A<T*>    { public:  int f () const { return 0; } };]], [[
A<float*> a; return a.f();]])],[ac_cv_cxx_partial_specialization_syntax=yes],[ac_cv_cxx_partial_specialization_syntax=no])
 AC_LANG_POP([])
])
if test "$ac_cv_cxx_partial_specialization_syntax" != yes; then
  echo "Your compiler ($CXX) does not support partial template specialization, trash it"
  exit 1;
fi

AC_CANONICAL_HOST

echo "you are compiling getfem++ on a $host"

case $CXX in
 cxx)
	echo "Using Compaq cxx compiler"
	echo "WARNING : Control that you have at least Compaq C++ V6.3"
 	here=`pwd`
 	cd $srcdir
dnl     il faut utiliser -tweak au lieu des repositories ...
	CXXFLAGS="$CXXFLAGS -tweak -std strict_ansi -fast -Wl,-S -nopure_cname"
dnl 	CXXFLAGS="$CXXFLAGS -ptr `pwd`/cxx_repository -std strict_ansi -O3"
	CFLAGS="$CFLAGS -fast -Wl,-S"
 	cd $here
	;;
 CC)
	case $host in
	*irix*)
		echo "Using MIPSPRO CC on IRIX  (LD is set to CC)"
		LD=CC   dnl sinon getfem_matlab a des problèmes (unresolved symbol __record_needed_destruction)
dnl 		CXXFLAGS="$CXXFLAGS -LANG:std -O3 -OPT:Olimit=0:roundoff=3:div_split=ON:alias=typed -TARG:platform=ip25"
 		CXXFLAGS="$CXXFLAGS -LANG:std  -O3 "
dnl             CXXFLAGS="$CXXFLAGS -LANG:std  -O3 -ansiW "
		SUPLDFLAGS="-lCio"
		;;
	*sun*)
		echo "Using SUN C++ WorkShop Compiler"
		CXXFLAGS="$CXXFLAGS +w2 -O3 -library=stlport4"
		;;
	esac
	;;
 aCC)
	echo "Using HP ANSI C++ Compiler aCC"
	CXXFLAGS="$CXXFLAGS -AA -fast"	
	;;
	
 *g++* | c++)
	GCCVER=`$CXX --version | head -1 | cut -d ' ' -f3`
	echo "Using the GNU g++ compiler $GCCVER"
	AC_CHECK_CXX_FLAG([-O3],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-Wall -W],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-fmessage-length=0],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-ftemplate-depth-40],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-pedantic],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-Wshadow],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-Wpointer-arith],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-Wcast-qual],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-Wwrite-strings],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-Wconversion],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-Wredundant-decls],CXXFLAGS)
	dnl -Wno-long-double fixes a warning on Darwin
	dnl AC_CHECK_CXX_FLAG([-Wno-long-double],CXXFLAGS)
	AC_CHECK_CXX_FLAG([-Wno-long-long],CXXFLAGS)
	dnl -rdynamic used for backtraces
	AC_CHECK_CXX_FLAG([-rdynamic],SUPLDFLAGS)

dnl 	CXXFLAGS="$CXXFLAGS -fmessage-length=0 -ftemplate-depth-40 -pedantic -O3 -Wall -W $WSHADOW -Wpointer-arith -Wcast-qual -Wwrite-strings -Wconversion -Wredundant-decls -Wno-long-double"
dnl	SUPLDFLAGS="-rdynamic" # -rdynamic for backtraces
        CFLAGS="-O3"
	;;
 icc | icpc)
	echo "Using INTEL icc"
dnl -tpp6 is for pentiumII and more
dnl -Xc is for ansi conformance
	CXXFLAGS="$CXXFLAGS -O3 -Xc -ansi"
        CFLAGS="$CFLAGS -O3 -Xc -ansi"
	;;
 *)
	echo "Using a unknown compiler"
 	CXXFLAGS="$CXXFLAGS -O3"
        CFLAGS="$CFLAGS -O3"
	;;
esac

AC_SUBST(SUPLDFLAGS)

dnl ------------------------------------------------------------------------
dnl   init libtools for shared libraries
dnl ------------------------------------------------------------------------

dnl AC_DISABLE_FAST_INSTALL
AM_DISABLE_SHARED
AM_ENABLE_STATIC

dnl always build with -fPIC so that the matlab and python interface
dnl can be run on x86_64 platforms
dnl unfortunately , it does not work... I HATE LIBTOOL
dnl AC_LIBTOOL_PICMODE(['yes'])

AM_PROG_LIBTOOL
AC_SUBST([LIBTOOL_DEPS])



dnl -------------------------------BLAS----------------------------------

dnl why I hate autoconf: if the code below is put into a separate file,
dnl the generated ./configure will stop if no Fortran compiler is found. always. even
dnl if no AC_FC_FUNC is executed.
acx_blas_ok=no

AC_ARG_WITH(blas,
        [AS_HELP_STRING([--with-blas=<lib>],[use BLAS library <lib>])])
case $with_blas in
        yes | "") ;;
        no) acx_blas_ok=disable ;;
        -* | */* | *.a | *.so | *.so.* | *.o| builtin) BLAS_LIBS="$with_blas" ;;
        *) BLAS_LIBS="-l$with_blas" ;;
esac

# Get fortran linker names of BLAS functions to check for.
if test x"$FC" = "x"; then
  echo "No fortran compiler found, assuming c-name for SGEMM is 'sgemm_'"
  sgemm=sgemm_
  dgemm=dgemm_
else
  AC_FC_FUNC(sgemm)
  AC_FC_FUNC(dgemm)
fi
acx_blas_save_LIBS="$LIBS"
LIBS="$LIBS $FLIBS"
echo "BLAS_LIBS=$BLAS_LIBS"
# First, check BLAS_LIBS environment variable
if test "x$BLAS_LIBS" = xbuiltin; then
  echo "Using builtin blas lib";
  BLAS_LIBS=""
else

if test $acx_blas_ok = no; then
  if test "x$BLAS_LIBS" != x; then
        save_LIBS="$LIBS"; LIBS="$BLAS_LIBS $LIBS"
        AC_MSG_CHECKING([for $sgemm in $BLAS_LIBS])
        AC_TRY_LINK_FUNC($sgemm, [acx_blas_ok=yes], [BLAS_LIBS=""])
        AC_MSG_RESULT($acx_blas_ok)
        LIBS="$save_LIBS"
  fi
fi

# BLAS linked to by default?  (happens on some supercomputers)
if test $acx_blas_ok = no; then
        save_LIBS="$LIBS"; LIBS="$LIBS"
        AC_CHECK_FUNC($sgemm, [acx_blas_ok=yes])
        LIBS="$save_LIBS"
fi

# BLAS in ATLAS library? (http://math-atlas.sourceforge.net/)
if test $acx_blas_ok = no; then
        AC_CHECK_LIB(atlas, ATL_xerbla,
                [AC_CHECK_LIB(f77blas, $sgemm,
                [AC_CHECK_LIB(cblas, cblas_dgemm,
                        [acx_blas_ok=yes
                         BLAS_LIBS="-lf77blas -latlas $FCLIBS"],
                        [], [-lf77blas -latlas])],
                        [], [-latlas])])
fi

# BLAS in PhiPACK libraries? (requires generic BLAS lib, too)
if test $acx_blas_ok = no; then
        AC_CHECK_LIB(blas, $sgemm,
                [AC_CHECK_LIB(dgemm, $dgemm,
                [AC_CHECK_LIB(sgemm, $sgemm,
                        [acx_blas_ok=yes; BLAS_LIBS="-lsgemm -ldgemm -lblas"],
                        [], [-lblas])],
                        [], [-lblas])])
fi

# BLAS in Alpha CXML library?
if test $acx_blas_ok = no; then
        AC_CHECK_LIB(cxml, $sgemm, [acx_blas_ok=yes;BLAS_LIBS="-lcxml"])
fi

# BLAS in Alpha DXML library? (now called CXML, see above)
if test $acx_blas_ok = no; then
        AC_CHECK_LIB(dxml, $sgemm, [acx_blas_ok=yes;BLAS_LIBS="-ldxml"])
fi

# BLAS in Sun Performance library?
if test $acx_blas_ok = no; then
        if test "x$GCC" != xyes; then # only works with Sun CC
                AC_CHECK_LIB(sunmath, acosp,
                        [AC_CHECK_LIB(sunperf, $sgemm,
                                [BLAS_LIBS="-xlic_lib=sunperf -lsunmath"
                                 acx_blas_ok=yes],[],[-lsunmath])])
        fi
fi

# BLAS in SCSL library?  (SGI/Cray Scientific Library)
if test $acx_blas_ok = no; then
        AC_CHECK_LIB(scs, $sgemm, [acx_blas_ok=yes; BLAS_LIBS="-lscs"])
fi

# BLAS in SGIMATH library?
if test $acx_blas_ok = no; then
        AC_CHECK_LIB(complib.sgimath, $sgemm,
                     [acx_blas_ok=yes; BLAS_LIBS="-lcomplib.sgimath"])
fi

# BLAS in IBM ESSL library? (requires generic BLAS lib, too)
if test $acx_blas_ok = no; then
        AC_CHECK_LIB(blas, $sgemm,
                [AC_CHECK_LIB(essl, $sgemm,
                        [acx_blas_ok=yes; BLAS_LIBS="-lessl -lblas"],
                        [], [-lblas $FLIBS])])
fi

# Generic BLAS library?
if test $acx_blas_ok = no; then
        AC_CHECK_LIB(blas, $sgemm, [acx_blas_ok=yes; BLAS_LIBS="-lblas"])
fi

if test $acx_blas_ok = no; then
        AC_CHECK_LIB(blas, $sgemm, [acx_blas_ok=yes; BLAS_LIBS="-lblas $FCLIBS"])
fi

fi # if BLAS_LIBS=builtin

AC_SUBST(BLAS_LIBS)

LIBS="$acx_blas_save_LIBS"

# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
if test x"$acx_blas_ok" = xyes; then
	echo "OK, You have working BLAS libs ! Using $BLAS_LIBS" ; HAVE_VENDOR_BLAS=1
else
        echo " *** YOU DONT HAVE BLAS! *** Using a cheap replacement" ; HAVE_VENDOR_BLAS=0
fi

dnl ACX_BLAS([ echo "OK, You have working BLAS libs !"; HAVE_VENDOR_BLAS=1 ], [echo "YOU DONT HAVE BLAS! Using a cheap replacement" ; HAVE_VENDOR_BLAS=0])
LIBS="$LIBS $BLAS_LIBS"
CPPFLAGS="$CPPFLAGS -DGMM_USES_BLAS"



dnl ------------------------------SuperLU config-------------------------
AC_ARG_ENABLE(superlu,
[  --enable-superlu    Turn on/off SuperLU support],
[case "${enableval}" in
  yes) usesuperlu=YES ;;
  no)  usesuperlu=NO ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-superlu]) ;;
esac],[usesuperlu=YES])

SUPERLU_CPPFLAGS=""
SUPERLU_SRC=""
SUPERLU_LIBS=""
SUPERLU_MAKEFILE=""

if test x$usesuperlu = xYES; then
  echo "Building with SuperLU support (use --enable-superlu=no to disable it)"
  if test x"$FC" = "x"; then
    sgemm="sgemm_"
  else
    AC_FC_FUNC(sgemm)
    echo "FC=$FC"
  fi
  case $sgemm in
    sgemm)
          F77_CALL_C="NOCHANGE";
          ;;
    sgemm_)
          F77_CALL_C="ADD_";
          ;;
    SGEMM)
          F77_CALL_C="UPCASE";
          ;;
    sgemm__)
          F77_CALL_C="ADD__";
          ;;
    *)
          AC_MSG_ERROR(["superlu won't handle this calling convention: sgemm -> $sgemm"])
          ;;
  esac
  SUPERLU_CPPFLAGS="$CPPFLAGS -DUSE_VENDOR_BLAS -DF77_CALL_C=$F77_CALL_C"
  SUPERLU_SRC="superlu"
  SUPERLU_LIBS="../$SUPERLU_SRC/libsuperlu.la"
  SUPERLU_MAKEFILE="$SUPERLU_SRC/Makefile"
else
  echo "Building without SuperLU support (use --enable-superlu=yes to enable it)"
  AC_CHECK_LIB([superlu], [dCreate_CompCol_Matrix],[],
               [AC_MSG_ERROR([SuperLU library not found])])

  AC_CHECK_HEADERS(
  [superlu/colamd.h superlu/slu_Cnames.h \
   superlu/slu_cdefs.h superlu/slu_ddefs.h superlu/slu_sdefs.h superlu/slu_zdefs.h \
   superlu/slu_dcomplex.h superlu/slu_scomplex.h],
  [usesuperlu="yes"],
  [
    if test "x$usesuperlu" = "xyes"; then
      AC_MSG_ERROR([header files of superlu not found. Use --enable-superlu=yes flag]);
    fi;
  ])

  SUPERLU_LIBS="-lsuperlu"
  LIBS="$LIBS $SUPERLU_LIBS"
fi

AC_SUBST([SUPERLU_CPPFLAGS])
AC_SUBST([SUPERLU_SRC])
AC_SUBST([SUPERLU_LIBS])
AM_CONDITIONAL(USEBLASLITE, test x$HAVE_VENDOR_BLAS = x0)
echo "Configuration of SuperLU done"

if test "$MUMPS_CFLAGS" -o "$MUMPS_LIBS"; then
  echo "You are using MUMPS!"
  MUMPS_CFLAGS="$MUMPS_CFLAGS -DGMM_USES_MUMPS"
  AC_SUBST(MUMPS_CFLAGS)
  AC_SUBST(MUMPS_LIBS)
fi

dnl -----------------------------QD TESTS--------------------------------
AC_ARG_WITH(qd-lib-dir, [  --with-qd-lib-dir       directory in which the libqd.a can be found],
	QDLIB="$withval/libqd.a",QDLIB="$GFPREFIX/lib/libqd.a")
AC_ARG_WITH(qd-include-dir, [  --with-qd-include-dir      directory in which the qd.h header can be found],
	QDINC="-I$withval",QDINC="-I$GFPREFIX/include")
AC_ARG_ENABLE(dd,
 [  --enable-dd             enable the use of the qd library (some computation will be done with double-double precision, usefull for high order FEMs)],
 [ if   test "x$enableval" = "xyes" ; then useQDlib="yes"; QD_PREC="double"; fi], [useQDlib="no"])
AC_ARG_ENABLE(qd,
 [  --enable-qd             enable the use of the qd library (some computation will be done with quad-double precision, usefull for high order FEMs)],
 [ if   test "x$enableval" = "xyes" ; then useQDlib="yes"; QD_PREC="quad"; fi], [if test "x$useQDlib" = "xyes"; then useQDlib="yes"; else useQDlib="no"; fi])
if test "x$useQDlib" = "xyes" ; then  
  LIBS="$LIBS $QDLIB -lm"
  CPPFLAGS="$CPPFLAGS $QDINC"
dnl #define NO_INLINE
  AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <qd/qd.h>
#include <qd/dd.h>
#include <qd/fpu.h>
#include <iostream>
int main() {
  unsigned int old_cw;
  int ok;
  fpu_fix_start(&old_cw);
  qd_real q = 1.0;
  qd_real qq = qd_real("0.01");
  qd_real qqq = "1.010101010101010101010101010101010101010101010101010101010101010E0";
  dd_real d = 1.0;
  dd_real dd = dd_real("0.1");
  dd_real ddd = "1.1111111111111111111111111111111E0";
  for (int i=0; i < 100; ++i) { d += dd; dd *= dd_real("0.1"); }
  for (int i=0; i < 100; ++i) { q += qq; qq *= qd_real("0.01"); }
  std::cerr << "d = " << d << std::endl << "q = " << q << std::endl;
  std::cerr << abs(q - qqq) << std::endl;
  std::cerr << abs(d - ddd) << std::endl;
  if (abs(q - qqq) < 1e-63 && abs(d -ddd) < 1e-31) ok = 1;
  else ok = 0;
  fpu_fix_end(&old_cw); return 1-ok;
}
  ]])],[echo "checking if qd library is working...yes"],[ echo "QD library is not working (check config.log)"; exit 1],[])
  AC_DEFINE_UNQUOTED([HAVE_QDLIB],1,[defined if the qd library was found and is working])
  HAVE_QDLIB=1;
  if test "x$QD_PREC" = "xquad"; then
    AC_DEFINE_UNQUOTED([QDLIB_USE_QUAD],1,[defined if quad-doubles are to be used instead of double-double])
  fi;
fi;
dnl -----------------------------END QD TESTS--------------------------------

dnl ------------------------------QHULL TEST--------------------------------
useQHULL="no"
AC_ARG_ENABLE(qhull,
 [  --enable-qhull             enable the use of the qhull library (required for generation of non regular meshes)],
 [ if   test "x$enableval" = "xyes" ; then useQHULL="yes"; fi], [useQHULL="test"])
if test "x$useQHULL" = "xno"; then
  echo "libqhull explicitly disabled";
else
  AC_CHECK_LIB(qhull, qh_new_qhull)
  AC_CHECK_HEADERS(qhull/qhull.h,[useQHULL="yes"],
[
  if test "x$useQHULL" = "xyes"; then
    AC_MSG_ERROR([header files qhull/qhull.h not found. Use --disable-qhull flag]);
  fi;
])
fi;
AM_CONDITIONAL(QHULL, test x$useQHULL = xyes)
dnl -----------------------------END OF QHULL TEST--------------------------

dnl ------------------------------LAPACK TEST--------------------------------

if test x"$acx_blas_ok" = xyes; then
  if test x"$FC" = "x"; then
    dgetrf=dgetrf_
  else
    AC_FC_FUNC(dgetrf)
  fi;

  AC_CHECK_LIB(lapack, dgetrf_, [acx_lapack_ok=yes; LAPACK_LIBS="-llapack "])

  if test x"$acx_lapack_ok" = xyes; then
     CPPFLAGS="$CPPFLAGS -DGMM_USES_LAPACK"
     LIBS="$LIBS $LAPACK_LIBS"
  fi
fi

dnl -----------------------------END OF LAPACK TEST--------------------------


dnl ------------------------------MPI TEST--------------------------------
if test "$MPI_CFLAGS" -o "$MPI_LIBS"; then
  echo "You are using MPI! Trying to build a parallelised version of getfem (require METIS)"
  dnl AC_DEFINE_UNQUOTED([PARA_LEVEL], 2, [getfem parallelisation flag])
  LIBS="$LIBS $MPI_LIBS -lmetis"
  CXXFLAGS="$CXXFLAGS $MPI_CFLAGS -DGETFEM_PARA_LEVEL=2"
  AC_CHECK_LIB(metis, METIS_PartMeshNodal, [metis_ok="yes"], [metis_ok="no"])
  if test "x$metis_ok" = "xno"; then
    AC_MSG_ERROR([Parallel getfem requires the METIS ( http://www-users.cs.umn.edu/~karypis/metis/metis/ ) library
 ----------> Please add the path to libmetis.a to the MPI_LIBS variable.])
  fi
  AC_SUBST(MPI_LIBS)
  AC_SUBST(MPI_CLAGS)
fi


dnl -----------------------------END OF MPI TEST--------------------------


AC_CHECK_HEADERS(sys/times.h,[],[SUPERLU_CPPFLAGS="$SUPERLU_CPPFLAGS -DNO_TIMER"])
AC_CHECK_HEADERS(cxxabi.h)
dnl ---------------------------- CHECK FOR __PRETTY_FUNCTION__ MACRO --------
AC_CACHE_CHECK([for __PRETTY_FUNCTION__], ac_cv_have_pretty_function, [
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [
                [ const char *s = __PRETTY_FUNCTION__; ]])],
                [ ac_cv_have_pretty_function="yes" ],
                [ ac_cv_have_pretty_function=="no"  ])])
if test "x$ac_cv_have_pretty_function" = "xyes"; then
        AC_DEFINE_UNQUOTED(HAVE_PRETTY_FUNCTION,1,[gcc style __PRETTY_FUNCTION__ macro])
fi;     


dnl ---------------------------- CHECK FOR GLIBC BACKTRACE availability -----
AC_CACHE_CHECK([for execinfo.h and backtrace], ac_cv_have_backtrace, [
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
                [[ #include <execinfo.h>  ]],
                [[ void* trace[256]; int n = backtrace(trace, 256); ]])],
                [ ac_cv_have_backtrace="yes" ],
                [ ac_cv_have_backtrace="no"  ])])
if test "x$ac_cv_have_backtrace" = "xyes"; then
        AC_DEFINE_UNQUOTED(HAVE_BACKTRACE,1,[glibc backtrace function])
fi;     

dnl ---------------------------- CHECK FOR feenableexcept -----
AC_CACHE_CHECK([for fenv.h and feenableexcept], ac_cv_have_feenableexcept, [
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
                [[ #include <fenv.h>           ]], 
                [[ feenableexcept(FE_DIVBYZERO | FE_INVALID); ]])],
                [ ac_cv_have_feenableexcept="yes" ],
                [ ac_cv_have_feenableexcept="no"  ])])
if test "x$ac_cv_have_feenableexcept" = "xyes"; then
        AC_DEFINE_UNQUOTED(HAVE_FEENABLEEXCEPT,1,[glibc floating point exceptions control])
fi;

BUILDER=`whoami`
AC_SUBST(BUILDER)
BUILDDATE=`date +%D,%H:%M:%S`
AC_SUBST(BUILDDATE)
CONFIGURE_ARGS=$ac_configure_args
AC_SUBST(CONFIGURE_ARGS)
LIBTOOL_VERSION_INFO="-version-info ${MAJOR_VERSION}:${MINOR_VERSION}:0"
AC_SUBST(LIBTOOL_VERSION_INFO)

dnl AC_CHECK_PROGS(RANLIB, ranlib)


dnl ------------ for distclean of meshes ---------------------
j="tests/meshes/disc_P2_h4.mesh"
if test -L $j || test ! -f $j; then
  DISTCLEANMESH="";
else
  DISTCLEANMESH="#";
fi;
AC_SUBST(DISTCLEANMESH)


dnl -----------------------------------------------
dnl switch for using the getfem_boost supplied files, or the real boost
dnl -----------------------------------------------

AC_ARG_ENABLE(boost, [  --enable-boost    Assume that boost is installed and use it],
[case "${enableval}" in
  yes) useboost=YES ;;
  no)  useboost=NO ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-boost]) ;;
esac],[useboost=NO])

if test "x$useboost" = "xYES"; then
        AC_DEFINE_UNQUOTED(HAVE_BOOST,1,[Tell getfem to use the real boost library])
fi;


dnl -----------------------------------------------
dnl MATLAB Interface
dnl -----------------------------------------------


AC_ARG_ENABLE(matlab,
[  --enable-matlab    Turn on/off matlab support],
[case "${enableval}" in
  yes) usematlab=YES ;;
  no)  usematlab=NO ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-matlab]) ;;
esac],[usematlab=NO])

AC_ARG_WITH(matlab-toolbox-dir, [  --with-matlab-toolbox-dir : directory in which the matlab interface will be installed],
            TOOLBOXDIR="$withval",TOOLBOXDIR="$GFPREFIX/getfem_toolbox")
AC_SUBST(TOOLBOXDIR)

AC_ARG_ENABLE(python,
[  --enable-python    Turn on/off python support],
[case "${enableval}" in
  yes) usepython=YES ;;
  no)  usepython=NO ;;
  *) AC_MSG_ERROR([bad value ${enableval} for --enable-python]) ;;
esac],[usepython=NO])

if test "$usematlab" != NO; then
  AC_CHECK_PROGS(MEX, mex)
  if test x"$MEX" = x""; then
    AC_CHECK_PROGS(MEX, mex.bat)
    if test x"$MEX" = x""; then
      if test x$usematlab = xYES; then
        AC_MSG_ERROR([Impossible to build the matlab interface without mex -- specify its full path with the MEX=/path/to/mex option, or use --enable-matlab-interface=no])
        exit 1
      fi
    else
      MEX=gnumex;
      MATLAB_COM_EXT=".dll";
      echo "You are using Matlab on a windows platform (assuming MingW compiler)";
      if test -f gnumex.opts; then
         echo "sourcing gnumex.opts.."
         source gnumex.opts;         
         echo "MATLAB_ROOT=$MATLAB_ROOT"
         echo "Matlab release is : R$MATLAB_RELEASE"
      elif test x$usematlab = xYES; then
        echo "You need to fill the gnumex.opts file, for example (use MSys-style paths, not DOS-style paths)"
        echo '#!/bin/sh'
        echo 'MATLAB_ROOT="c:\\MATLAB6p5"'
        echo 'MATLAB_RELEASE=13'
        echo 'MATLAB_INC_DIR="$MATLAB_ROOT\\extern\\include"'
        echo 'MEXOPTS=c:\\gnumex\\mexopts.bat'
        echo "when this is done, check that the gnumex script works correctly"
        echo " (i.e. gnumex gnumex.opts -v prints the rights options to use the MinGW gcc)"
        exit 1
      fi
    fi
  else
     dnl thanks to paolo for pointing the 'twin mex' problem
     if $(echo "" | $MEX 2>&1 | grep 'This is .*TeX'); then
	  AC_MSG_ERROR([the mex binary which is in the PATH appears to be part of LaTeX, not matlab !! run ./configure MEX=/path/to/matlab/mex]);
     fi;
     MATLAB_ROOT=`$MEX -v 2>&1 | grep "MATLAB " | awk '{print $4}'|sed -e '2,$d'`
     MATLAB_INC_DIR=$MATLAB_ROOT/extern/include
     echo "checking for matlab path... " $MATLAB_ROOT
     MATLAB_COM_EXT=`$MEX -v 2>&1 | grep "LDEXTENSION " | awk '{print $3}'`
     echo "checking for mex extension... " $MATLAB_COM_EXT
     MATLAB_RELEASE=`grep "MATLAB R" $MATLAB_ROOT/extern/src/mexversion.c | awk '{print $4}' | sed -e 's/R//'`
     echo "Matlab release is : R$MATLAB_RELEASE"
  fi
fi
AM_CONDITIONAL(BUILDMEX, test x$usematlab = xYES)



AC_SUBST(MATLAB_ROOT)
AC_SUBST(MATLAB_INC_DIR)
AC_SUBST(MATLAB_RELEASE)
AC_SUBST(MATLAB_COM_EXT)
AC_SUBST(MEX)

AM_CONDITIONAL(USE_MINGW_MEX, test x"$MATLAB_COM_EXT" = x".dll")



dnl ----------------------------
dnl RPCs -- matlab interface communication with a separated getfem process
dnl useful for debugging..
GETFEM_SERVER="";
use_rpc="no";
AC_ARG_ENABLE(matlab-rpc,
 [  --enable-matlab-rpc        enable use of RPCs for matlab interface],
 [ matlab_rpc="yes"; use_rpc="yes";
   echo "Matlab mex-file will use sun RPCs in order to communicate with the getfem server"],
 [matlab_rpc="no"])

if test x$use_rpc = xyes; then
  GETFEM_SERVER="getfem_server";
  AC_ARG_WITH(rpc-include, [  --with-rpc-include : directory in which the rpc/rpc.h header can be found],
              RPC_INC_DIR="-I$withval",RPC_INC_DIR="")
  case $host in
        *alpha*)
                RPC_LIB="-lrpc";
                ;;
	*darwin*)
	        RPC_LIB="";
		;;
        *)
                RPC_LIB="-lnsl";
                ;;
  esac
  AC_ARG_WITH(rpc-lib, [  --with-rpc-lib : linker flags for the RPC library],
              RPC_LIB="$withval")
  AC_SUBST(RPC_INC_DIR)
  AC_SUBST(RPC_LIB)
  AC_DEFINE_UNQUOTED(USE_RPC, 1, [Use rpc for getfem communication with matlab])
fi;
AC_SUBST(GETFEM_SERVER)
AM_CONDITIONAL(BUILDMEXRPC, test x$matlab_rpc = xyes)


dnl the pb is that we cannot link the libstdc++.so in the mex-file without horrible problems
dnl with dynamic_casts (with matlab 6.5 -- the pb seems to have disappeared since matlab-7). 
dnl Hence the gf_matlab.mexglx should be linked against the libstdc++.a ..
STDCPP_STATICLIBS=""

if test $usematlab = xYES; then
  dnl ------------------------------------
  dnl COMPILER SETTINGS
  compiler_type=dontcare
  case $CXX in
   *g++* | c++)
	case $host in
	x86_64-*)
	       echo "Compiling on an x86_64 architecture..."
	       ;;
        *-darwin*)
               echo "Compiling on Darwin (MacOS)"
		;;
	*)
		STDCPP_STATICLIBS=$($CXX -print-file-name=libstdc++.a)
		echo "The MEX file will be linked against the static c++ library '$STDCPP_STATICLIBS'"
		;;
	esac
	;;
   *icc | *icpc)
	dnl a small remark: with icpc 8.0, the getfem_server will crash 
	dnl at the first exception throwed (except with -g)
	dnl the fix is to pass the -static flag at the linker
	dnl unfortunately, the lovely libtool assumes that icpc won't
	dnl understand it, and removes it. I hate libtool.
	dnl so I added the -Wl,-static -- it works for now.
	GFSERVERFLAGS="-Wl,-static -static"
	;;
   *)
	;;
  esac
fi
AC_SUBST(GFSERVERFLAGS)
AC_SUBST(STDCPP_STATICLIBS)



dnl ----------------------------------------------
dnl python 
dnl ----------------------------------------------

if test x$usepython = xYES; then
  AM_PATH_PYTHON(2.2, usepython=YES, usepython=NO)
fi

AM_CONDITIONAL(BUILDPYTHON, test x$usepython = xYES)

if test x$usepython = xYES; then
  echo "Building with python support (use --enable-python=no to disable it)"
  echo "You will need the python-numpy package."
dnl  AM_PATH_PYTHON(2.2)
  AC_PYTHON_DEVEL
fi



dnl -----------------------------------------------
dnl sorties
dnl -----------------------------------------------
AC_CONFIG_FILES(\
	Makefile \
	m4/Makefile \
	cubature/Makefile \
	$SUPERLU_MAKEFILE \
	src/Makefile \
	tests/Makefile \
	tests/meshes/Makefile \
	tests-2.0/Makefile \
	contrib/Makefile \
	contrib/icare/Makefile \
	contrib/delaminated_crack/Makefile \
	contrib/signorini_schwarz/Makefile \
	contrib/static_friction/Makefile \
	contrib/bimaterial_crack_test/Makefile \
	contrib/bimat_contact_crack_test/Makefile \
	contrib/mixed_elastostatic/Makefile \
	contrib/contact_grd_trans/Makefile \
	contrib/mixed_dynamic_friction/Makefile \
	contrib/xfem_large_strain/Makefile \
	contrib/xfem_contact/Makefile \
	contrib/crack_plate/Makefile \
	contrib/inter_element_test/Makefile \
	contrib/aposteriori/Makefile \
	bin/Makefile \
        interface/Makefile \
        interface/bin/Makefile \
	interface/src/Makefile \
	interface/src/matlab/Makefile \
	interface/src/matlab/@gfCvStruct/Makefile \
	interface/src/matlab/@gfEltm/Makefile \
	interface/src/matlab/@gfFem/Makefile \
	interface/src/matlab/@gfGeoTrans/Makefile \
	interface/src/matlab/@gfInteg/Makefile \
	interface/src/matlab/@gfMesh/Makefile \
	interface/src/matlab/@gfMeshFem/Makefile \
	interface/src/matlab/@gfSlice/Makefile \
	interface/src/matlab/@gfMeshIm/Makefile \
	interface/src/matlab/@gfSpmat/Makefile \
	interface/src/matlab/@gfPrecond/Makefile \
	interface/src/matlab/@gfMdBrick/Makefile \
	interface/src/matlab/@gfMdState/Makefile \
	interface/src/matlab/@gfModel/Makefile \
	interface/src/matlab/@gfLevelSet/Makefile \
	interface/src/matlab/@gfMeshLevelSet/Makefile \
	interface/src/matlab/private/Makefile \
	interface/src/python/Makefile \
	interface/src/python/setup.py \
	interface/tests/Makefile \
        interface/tests/meshes/Makefile \
	interface/tests/matlab/Makefile \
        interface/tests/matlab/private/Makefile \
        interface/tests/python/Makefile \
getfem-config getfem-config-notinstalled gmm-config)
AC_OUTPUT
chmod a+x getfem-config-notinstalled
chmod a+x getfem-config
chmod a+x gmm-config
echo ""
echo "------------------------------------------------------------------------------"
echo "If you want to build the shared library of getfem++, use --enable-shared"
echo "(by default, only the static one will be built)"
if test "x$useQDlib" = "xyes" ; then  
  echo "Using the QD library:"
  echo "   high precision (${QD_PREC}-double precision) polynomials and integration methods are enabled";
fi;
if test "x$useQHULL" = "xyes"; then
  echo "Using the qhull library for delaunay triangulations."
else
  echo "Not using the qhull library. Mesh generation will be disabled."
fi;
echo
if test "x$HAVE_VENDOR_BLAS" = "x0"; then
  echo "*** No usable blas library was found ***"
  echo "A generic BLAS implementation will be used, however you should "
  echo "consider installing a faster BLAS, such as ATLAS"
else
  echo "Link options for the BLAS library: $BLAS_LIBS"
fi;
echo "You can give the location of your prefered blas library with either"
echo "the --with-blas=<lib> option, or the BLAS_LIBS environment variable"
echo 'for example: ./configure BLAS_LIBS="-L/usr/lib/atlas/sse2 -lblas"'
echo

if test x"$acx_lapack_ok" = xyes; then
  echo "Lapack library found : $LAPACK_LIBS"
else
  echo "No lapack library found : generic (less effective) algorithms will be used"
fi

if test -z ""`echo $srcdir | grep "^/"`; then
  addpathm="../../"
else
  addpathm=""
fi

dnl utiliser AC_CONFIG_LINKS a la place ?
for i in `ls $srcdir/tests/meshes/*.mesh`; do
	j="tests/meshes/"`basename $i`
	if test ! -L $j && test ! -f $j; then
		ln -s $addpathm$i $j
	fi
done

echo "---------------------------------------"
echo "Ready to build getfem++"
echo "  building MATLAB interface: $usematlab"
echo "  building PYTHON interface: $usepython (requires numpy)"
echo "---------------------------------------"

case $host in
  x86_64-*)
	if test $usematlab = "YES" -o $usepython = "YES"; then
          if test $pic_mode != "yes"; then
            echo "!!!!!"
            echo "!!!!! Your build will fail because you did not use the --with-pic option"
            echo "!!!!! This is required for the getfem interfaces on x86_64"
            echo ""
          fi
        fi      
  ;;
esac
