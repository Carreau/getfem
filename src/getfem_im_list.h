// This file is generated by make_getfem_list

/* *********************************************************************** */
/*                                                                         */
/* Copyright (C) 2000-2003  Yves Renard.                                   */
/*                                                                         */
/* This file is a part of GETFEM++                                         */
/*                                                                         */
/* This program is free software; you can redistribute it and/or modify    */
/* it under the terms of the GNU Lesser General Public License as          */
/* published by the Free Software Foundation; version 2.1 of the License.  */
/*                                                                         */
/* This program is distributed in the hope that it will be useful,         */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of          */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           */
/* GNU Lesser General Public License for more details.                     */
/*                                                                         */
/* You should have received a copy of the GNU Lesser General Public        */
/* License along with this program; if not, write to the Free Software     */
/* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,  */
/* USA.                                                                    */
/*                                                                         */
/* *********************************************************************** */



namespace getfem {


  struct im_desc {
      const char *method_name;
      const char *geotrans_name;
      size_type nb_points;
      size_type firstreal;
      size_type firstface;
      size_type firsttype;
  };


  static const int NB_IM=16;

  static im_desc im_desc_tab[NB_IM] = {
    {"IM_NC(0,0)", "GT_PK(0,0)", 1, 0, 0, 0},
    {"IM_QUAD(2)", "GT_QK(2,1)", 3, 1, 0, 1},
    {"IM_QUAD(3)", "GT_QK(2,1)", 2, 10, 4, 4},
    {"IM_QUAD(5)", "GT_QK(2,1)", 3, 16, 8, 6},
    {"IM_TETRAHEDRON(1)", "GT_PK(3,1)", 1, 25, 12, 9},
    {"IM_TETRAHEDRON(2)", "GT_PK(3,1)", 1, 29, 16, 10},
    {"IM_TETRAHEDRON(3)", "GT_PK(3,1)", 2, 33, 20, 11},
    {"IM_TETRAHEDRON(5)", "GT_PK(3,1)", 4, 41, 24, 13},
    {"IM_TRIANGLE(1)", "GT_PK(2,1)", 1, 57, 28, 17},
    {"IM_TRIANGLE(13)", "GT_PK(2,1)", 10, 60, 31, 18},
    {"IM_TRIANGLE(2)", "GT_PK(2,1)", 3, 90, 34, 28},
    {"IM_TRIANGLE(3)", "GT_PK(2,1)", 4, 99, 37, 31},
    {"IM_TRIANGLE(4)", "GT_PK(2,1)", 2, 111, 40, 35},
    {"IM_TRIANGLE(5)", "GT_PK(2,1)", 3, 117, 43, 37},
    {"IM_TRIANGLE(6)", "GT_PK(2,1)", 3, 126, 46, 40},
    {"IM_TRIANGLE(7)", "GT_PK(2,1)", 4, 135, 49, 43},
  };

  static const int NB_IMR=147; 

  static long_scalar_type im_desc_real[NB_IMR] = {
    // IM_NC(0,0)
  1.0,
    // IM_QUAD(2)
  0.9082482904638630163662140124509818986609912467761116880721154277,
  0.5,
  0.3333333333333333333333333333333333333333333333333333333333333333,
  0.2958758547680684918168929937745090506695043766119441559639422863,
  .8535533905932737622004221810524245196424179688442370182941699344,
  0.3333333333333333333333333333333333333333333333333333333333333333,
  0.2958758547680684918168929937745090506695043766119441559639422863,
  .1464466094067262377995778189475754803575820311557629817058300656,
  0.3333333333333333333333333333333333333333333333333333333333333333,
    // IM_QUAD(3)
  0.5,
  .9082482904638630163662140124509818986609912467761116880721154277,
  0.25,
  .9082482904638630163662140124509818986609912467761116880721154277,
  0.5,
  0.25,
    // IM_QUAD(5)
  0.5,
  0.5,
  .2857142857142857142857142857142857142857142857142857142857142857,
  0.5,
  0.9830458915396479524572888052389923907713377624919657696231974935,
  0.0793650793650793650793650793650793650793650793650793650793650793,
  0.8872983346207416885179265399782399610832921705291590826587573766,
  0.8872983346207416885179265399782399610832921705291590826587573766,
  0.1388888888888888888888888888888888888888888888888888888888888888,
    // IM_TETRAHEDRON(1)
  0.25,
  0.25,
  0.25,
  0.1666666666666666666666666666666666666666666666666666666666666666,
    // IM_TETRAHEDRON(2)
  0.13819660112501052,
  0.13819660112501052,
  0.13819660112501052,
  0.0416666666666666666666666666666666666666666666666666666666666666,
    // IM_TETRAHEDRON(3)
  0.25,
  0.25,
  0.25,
  -0.1333333333333333333333333333333333333333333333333333333333333333,
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.075,
    // IM_TETRAHEDRON(5)
  0.25,
  0.25,
  0.25,
  0.008818342151675485,
  0.31979362782962991,
  0.31979362782962991,
  0.31979362782962991,
  0.011511367871045398,
  0.091971078052723033,
  0.091971078052723033,
  0.091971078052723033,
  0.01198951396316977,
  0.056350832689629156,
  0.056350832689629156,
  0.44364916731037084,
  0.008818342151675485,
    // IM_TRIANGLE(1)
  0.3333333333333333333333333333333333333333333333333333333333333333,
  0.3333333333333333333333333333333333333333333333333333333333333333,
  0.5,
    // IM_TRIANGLE(13)
  0.5,
  0.5,
  0.00267845189554543044455908674650066,
  0.333333333333333333333333333333333,
  0.333333333333333333333333333333333,
  0.0293480398063595158995969648597808,
  0.0246071886432302181878499494124643,
  0.0246071886432302181878499494124643,
  0.00392538414805004016372590903990464,
  0.420308753101194683716920537182100,
  0.420308753101194683716920537182100,
  0.0253344765879434817105476355306468,
  0.227900255506160619646298948153592,
  0.227900255506160619646298948153592,
  0.0250401630452545330803738542916538,
  0.116213058883517905247155321839271,
  0.116213058883517905247155321839271,
  0.0158235572961491595176634480481793,
  0.476602980049079152951254215211496,
  0.476602980049079152951254215211496,
  0.0157462815379843978450278590138683,
  0.851775587145410469734660003794168,
  0.0227978945382486125477207592747430,
  0.00790126610763037567956187298486575,
  0.692797317566660854594116289398433,
  0.0162757709910885409437036075960413,
  0.00799081889046420266145965132482933,
  0.637955883864209538412552782122039,
  0.0897330604516053590796290561145196,
  0.0182757511120486476280967518782978,
    // IM_TRIANGLE(2)
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.6666666666666666666666666666666666666666666666666666666666666666,
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.1666666666666666666666666666666666666666666666666666666666666666,
  0.6666666666666666666666666666666666666666666666666666666666666666,
  0.1666666666666666666666666666666666666666666666666666666666666666,
    // IM_TRIANGLE(3)
  0.3333333333333333333333333333333333333333333333333333333333333333,
  0.3333333333333333333333333333333333333333333333333333333333333333,
  -0.28125,
  0.2,
  0.2,
  0.2604166666666666666666666666666666666666666666666666666666666666,
  0.6,
  0.2,
  0.2604166666666666666666666666666666666666666666666666666666666666,
  0.2,
  0.6,
  0.2604166666666666666666666666666666666666666666666666666666666666,
    // IM_TRIANGLE(4)
  0.445948490915965,
  0.445948490915965,
  0.111690794839005,
  0.091576213509771,
  0.091576213509771,
  0.054975871827661,
    // IM_TRIANGLE(5)
  0.333333333333333,
  0.333333333333333,
  0.1125,
  0.470142064105115,
  0.470142064105115,
  0.0661970763942530,
  0.101286507323456,
  0.101286507323456,
  0.0629695902724135,
    // IM_TRIANGLE(6)
  0.063089104491502,
  0.063089104491502,
  0.0254224531851030,
  0.249286745170910,
  0.249286745170910,
  0.0583931378631890,
  0.310352451033785,
  0.053145049844816,
  0.0414255378091870,
    // IM_TRIANGLE(7)
  0.0651301029022,
  0.0651301029022,
  0.02667361780440,
  0.3128654960049,
  0.0486903154253,
  0.03855688044515,
  0.2603459660790,
  0.2603459660790,
  0.08780762871660,
  0.3333333333333,
  0.3333333333333,
  -0.07478502223385,
  };

  static const int NB_IMF=52; 

  static const char * im_desc_face_meth[NB_IMF] = {
    // IM_QUAD(2)
    "IM_GAUSS1D(2)","IM_GAUSS1D(2)","IM_GAUSS1D(2)","IM_GAUSS1D(2)",
    // IM_QUAD(3)
    "IM_GAUSS1D(3)","IM_GAUSS1D(3)","IM_GAUSS1D(3)","IM_GAUSS1D(3)",
    // IM_QUAD(5)
    "IM_GAUSS1D(5)","IM_GAUSS1D(5)","IM_GAUSS1D(5)","IM_GAUSS1D(5)",
    // IM_TETRAHEDRON(1)
    "IM_TRIANGLE(1)","IM_TRIANGLE(1)","IM_TRIANGLE(1)","IM_TRIANGLE(1)",
    // IM_TETRAHEDRON(2)
    "IM_TRIANGLE(2)","IM_TRIANGLE(2)","IM_TRIANGLE(2)","IM_TRIANGLE(2)",
    // IM_TETRAHEDRON(3)
    "IM_TRIANGLE(3)","IM_TRIANGLE(3)","IM_TRIANGLE(3)","IM_TRIANGLE(3)",
    // IM_TETRAHEDRON(5)
    "IM_TRIANGLE(5)","IM_TRIANGLE(5)","IM_TRIANGLE(5)","IM_TRIANGLE(5)",
    // IM_TRIANGLE(1)
    "IM_GAUSS1D(1)","IM_GAUSS1D(1)","IM_GAUSS1D(1)",
    // IM_TRIANGLE(13)
    "IM_GAUSS1D(13)","IM_GAUSS1D(13)","IM_GAUSS1D(13)",
    // IM_TRIANGLE(2)
    "IM_GAUSS1D(2)","IM_GAUSS1D(2)","IM_GAUSS1D(2)",
    // IM_TRIANGLE(3)
    "IM_GAUSS1D(3)","IM_GAUSS1D(3)","IM_GAUSS1D(3)",
    // IM_TRIANGLE(4)
    "IM_GAUSS1D(4)","IM_GAUSS1D(4)","IM_GAUSS1D(4)",
    // IM_TRIANGLE(5)
    "IM_GAUSS1D(5)","IM_GAUSS1D(5)","IM_GAUSS1D(5)",
    // IM_TRIANGLE(6)
    "IM_GAUSS1D(6)","IM_GAUSS1D(6)","IM_GAUSS1D(6)",
    // IM_TRIANGLE(7)
    "IM_GAUSS1D(7)","IM_GAUSS1D(7)","IM_GAUSS1D(7)",
  };

  static const int NB_IMN=47; 

  static size_type im_desc_node_type[NB_IMN] = {
    0,  // IM_NC(0,0)
    0, 0, 0,  // IM_QUAD(2)
    1, 1,  // IM_QUAD(3)
    0, 1, 1,  // IM_QUAD(5)
    0,  // IM_TETRAHEDRON(1)
    1,  // IM_TETRAHEDRON(2)
    0, 1,  // IM_TETRAHEDRON(3)
    0, 1, 1, 1,  // IM_TETRAHEDRON(5)
    0,  // IM_TRIANGLE(1)
    1, 0, 1, 1, 1, 1, 1, 1, 1, 1,  // IM_TRIANGLE(13)
    0, 0, 0,  // IM_TRIANGLE(2)
    0, 0, 0, 0,  // IM_TRIANGLE(3)
    1, 1,  // IM_TRIANGLE(4)
    0, 1, 1,  // IM_TRIANGLE(5)
    1, 1, 1,  // IM_TRIANGLE(6)
    1, 1, 1, 0,  // IM_TRIANGLE(7)
  };

}

