#!/usr/bin/perl
 

#######################################
#       System identification         #
#######################################

$rootlib = `pwd`; chomp($rootlib);
$machine = `uname -m`; chomp($machine);
$systeme = `uname -s`; chomp($systeme); $systeme .= `uname -r`;chomp($systeme);
$getfem_lib = "libgetfem.a";


#######################################
# Environnement variables for shell   #
#######################################

$ENV{PATH} = "/bin:/usr/dt/bin:.:/usr/ucb:/sbin:/usr/bin:/usr/sbin:/etc:/usr/etc:/usr/lib:/usr/ccs/bin:/usr/local/bin:/usr/local/opt/bin:/usr/bin/X11:/usr/local/opt/sbin:/usr/bin:/usr/local/bin:/usr/bin/X11:/usr/dt/bin:/usr/local/texmf/bin/alpha_osf1:opt/bin:/opt/matlab/bin:/usr/local/matlab/bin";
$ENV{SHELL} = "/usr/bin/tcsh";
if ($systeme =~ /Linux/)
{
  $ENV{SYSDEX} = "Linux";
}
else
{
  $ENV{SYSDEX} = "OSF1";
  $ENV{TEXMF} = "/usr/local/texmf";
  $ENV{TEXMFUPD} = "/usr/local";
  $ENV{LU_TEXENV} = "=1";
  $ENV{MTPK_DESTROOT} = "/usr/local/texmf/fonts";
  $ENV{MTP_MAPFILE} = "/usr/local/texmf/dvips/psfonts.map";
  $ENV{TEXMFCNF} = "/usr/local/texmf/web2c";
}


#######################################
#         Updating files              #
#######################################

print "Checkout for files\n";
print `cd ..; cvs -d :pserver:renard\@gmmlinux2.gmm.priv:\/var\/cvs checkout getfem++`;

print "\n\nMaking links\n";
`mkdir -p include`;
`cd include; ln -sf ../dal/*.h .; ln -sf ../bgeot/*.h .;  ln -sf ../linkmsg/*.h .;  ln -sf ../ftool/*.h .; ln -sf ../getfemlib/*.h .; ln -sf ../misc/*.h .; ln -sf ../misc/LEDAWIN/*.h .; ln -sf ../matlabint/*.h .`; print "\n\n";
`mkdir -p sources`;
`cd sources; ln -sf ../dal/*.C .; ln -sf ../bgeot/*.C .;  ln -sf ../ftool/*.C .; ln -sf ../getfemlib/*.C .; ln -sf ../misc/*.C .; ln -sf ../misc/LEDAWIN/*.C .; ln -sf ../matlabint/*.C .`; print "\n\n";

#######################################
#        Building Makefile            #
#######################################

print "Building Makefile\n";
open(MAKEFILE, ">Makefile") or die "Open \'Makefile\' impossible : $!\n";
print MAKEFILE '# File automaticaly generated by compile_job', "\n\n\n";

print MAKEFILE "\n\n", '# principal paths :', "\n";
print MAKEFILE "GETFEM_INCLUDE = $rootlib\/include\n";
print MAKEFILE "GETFEM_SOURCE = $rootlib\/sources\n";
print MAKEFILE "OBJ_DIR = $rootlib\/sources\n";
print MAKEFILE "GETFEM_LIB = $rootlib\/sources\/$getfem_lib\n";
print MAKEFILE "GENERAL_ROOT = $rootlib\n";

print MAKEFILE "\n\n", '# compiler options :', "\n";
if ($systeme =~ /Linux/)
{
  print MAKEFILE "COMP = g++\n";
  print MAKEFILE "OPTIONS_STANDARD = -ainsi -ftemplate-depth-40\n";
  print MAKEFILE "OPTIONS_DEBUG    = -g\n";
  print MAKEFILE "OPTIONS_OPTIMIZE = -O3\n";
  print MAKEFILE "OPTIONS_BOTH     = -g -O3\n";
  print MAKEFILE "INCLUDES_STANDARD = -I/opt/matlab/extern/include \n";
  print MAKEFILE "INCLUDES_MTL = -I/opt/getfem/include/\n";
  print MAKEFILE "INCLUDES_ITL = -I/opt/getfem/include/\n";
  print MAKEFILE "LIB_X11 = -L/usr/X11R6/lib -lX11\n";
}
else
{
  print MAKEFILE "COMP = cxx\n";
  print MAKEFILE "OPTIONS_STANDARD = -ansi  -ptr $rootlib/cxx_repository\n";
  print MAKEFILE "OPTIONS_DEBUG    = -g\n";
  print MAKEFILE "OPTIONS_OPTIMIZE = -O3\n";
  print MAKEFILE "OPTIONS_BOTH     = -g3\n";
  print MAKEFILE "INCLUDES_STANDARD = -I/usr/local/matlab/extern/include \n";
  print MAKEFILE "INCLUDES_MTL = -I/usr/local/getfem/include\n";
  print MAKEFILE "INCLUDES_ITL = -I/usr/local/getfem/include\n";
  print MAKEFILE "LIB_X11 = -L/usr/X11R6/lib -lX11\n";
}

print MAKEFILE "CPLUS = \$(COMP) \$(OPTIONS_STANDARD) \$(OPTIONS_OPTIMIZE) \n";
print MAKEFILE "CPLUSDEBUG = \$(COMP) \$(OPTIONS_STANDARD)";
print MAKEFILE " \$(OPTIONS_DEBUG) \n";
print MAKEFILE "CPLUSOPTDEBUG = \$(COMP) \$(OPTIONS_STANDARD)";
print MAKEFILE " \$(OPTIONS_BOTH) \n";
print MAKEFILE "INCLUDES = \$(INCLUDES_STANDARD) \$(INCLUDES_MTL)";
print MAKEFILE " \$(INCLUDES_ITL) -I$rootlib\/include \n\n\n";
print MAKEFILE "LIB = $getfem_lib -lm\n";

print MAKEFILE "\n\n\n", "all : \$(GETFEM_LIB) matlabcom \n\n";

print MAKEFILE "\n\n", '# Dependencies : ', "\n";
print MAKEFILE `bin/include_dependencies include`;

print MAKEFILE "\n\n", '# Objects to compile : ', "\n";

print MAKEFILE "lib_objects =";
$listeC = `ls sources/\*.C`;
$listeC =~ s/\@//g;
$listeo = $listeC; 
while($listeo)
{
  ($fi, $listeo) = split('\s', $listeo, 2);
  while ($fi =~ /\//) { ($fi2, $fi) = split('\/', $fi, 2); }
  $fi =~ s/\.C/\.o/;
  print MAKEFILE " sources\/", $fi;
}

print MAKEFILE "\n\n", '# Compilation lines : ',  "\n";

while($listeC)
{
  ($fi, $listeC) = split('\s', $listeC, 2);
  $fi1 = $fi; $fi1 =~ s/\.C/\.o/;
  while ($fi1 =~ /\//) { ($fi2, $fi1) = split('\/', $fi1, 2); }
  $fi2 = $fi1;
  $fi2 =~ s/\.o/_h/;
#  $fi2 =~ s/\.o/.h/;
  print MAKEFILE "\n", "sources\/$fi1 : $fi \$($fi2)\n";
  print MAKEFILE "\t", '$(CPLUS) $(COPT)  -c $(INCLUDES) ', $fi, ' -o $@', "\n";

}


$listeC = `ls matlabcom/\*.C`;
$listeC =~ s/\@//g;
$listeB = $listeC;
$listeB =~ s/.C/$extmatcom/g;
$listeB =~ s/\n/ /g;
$listeB =~ s/matlabcom\//lib\//g;
print MAKEFILE "\n\n", 'matlabcom : ../lib/libgetfem.so ', $listeB, "\n\n";
print MAKEFILE '../lib/libgetfem.so : ', " \$(GETFEM_LIB) .\/sources\/*.o \n";
if ($systeme =~ /Linux/)
{
  print MAKEFILE "\t ld", ' -shared sources/dal*.o sources/bgeot*.o sources/ftool*.o sources/getfem*.o sources/matlabint*.o -o ../lib/libgetfem.so', "\n\n";
}
else
{
  $listeD = `ls cxx_repository`;
  open(AUXFILE, ">ldauxfile") or die "Open \'ldauxfile\' impossible : $!\n";
  while($listeD)
  {
    ($fi, $listeD) = split('\s', $listeD, 2);
    print AUXFILE 'cxx_repository/', $fi;
  }
  close(AUXFILE);
  print MAKEFILE "\t", 'ld -shared sources/dal*.o sources/bgeot*.o sources/ftool*.o sources/getfem*.o sources/matlabint*.o -input ldauxfile -o ../lib/libgetfem.so', "\n\n";
}

# il faut moduler ça si tout n'est pas chargé ...

# il faudrait faire proprement les dépendences des Mex files.
while($listeC)
{
  ($fi, $listeC) = split('\s', $listeC, 2);
  $fi1 = $fi;
  $fi1 =~ s/.C//g;
  $fi1 =~ s/matlabcom\//lib\//g;
  print MAKEFILE "\n", "$fi1 : $fi \$(GETFEM_LIB) .\/sources\/*.o \n";
  $fi1 =~ s/lib\///g;
  if ($systeme =~ /Linux/)
  {
    print MAKEFILE "\t", 'cd ../lib; mex -O $(INCLUDES) libgetfem.so ', "..\/getfem++\/$fi -o $fi1\n";
  }
  else
  {
    print MAKEFILE "\t", 'cd ../lib; $(CPLUS) $(COPT)  -c $(INCLUDES)', "..\/getfem++\/$fi -o $fi1.o", '; mex -O $(INCLUDES) libgetfem.so ', "..\/getfem++\/$fi -o $fi1\n";
  }
}



print MAKEFILE "\n\n\$(GETFEM_LIB) : \$(lib_objects)\n";
print MAKEFILE "\t ar r \$(GETFEM_LIB) \$(lib_objects) ; ranlib \$(GETFEM_LIB)\n";
print MAKEFILE "\n\nclean :\n";
print MAKEFILE "\t \/bin\/rm -f sources\/\*.o sources\/\*.a\n";

close(MAKEFILE);

#######################################
#         Compiling                   #
#######################################

print "\n\nCompiling\n";

open F, "make |" or die; print $_ while (<F>); close F;

#######################################
#     Documentation et liens          #
#######################################

# fabrication de la doc.
if ($systeme =~ /Linux/)
{
  print "\n\n No Documentation compilation.\n";
  print "\n\n Making links.\n";
}
else
{
  print "\n\n Documentation compilation.\n";
  print `cd doc; make;`;
  print "\n\n Making links.\n";
  print `cd ..; mkdir -p doc; cd doc; ln -sf ../getfem++/doc/basic_doc.ps .`;
  print `cd ../doc; ln -sf ../getfem++/doc/guide_intervention/guide_intervention.ps .`;
  print `cd ../doc; ln -sf ../getfem++/doc/doc++-doc.ps .`;
  print `cd ../doc; ln -sf ../getfem++/doc/cvs-doc.ps .`;
  
  open F1, "doc/html/index.html" or die;
  open F2, ">../doc/basic_doc.html" or die;
  while ($ligne = <F1>)
  {
    $ligne =~ s/HREF\=\"/HREF\=\"..\/getfem++\/doc\/html\//g;
    print F2 $ligne;
  }
  close F1; close F2; 
}

print `cd ..; mkdir -p include; cd include; ln -sf ../getfem++/include/*.h .`;
print `cd ..; mkdir -p lib; cd lib; ln -sf ../getfem++/sources/*.a .`;
